Grading at Thu Sep 26 21:32:26 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==972== Memcheck, a memory error detector
==972== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==972== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==972== Command: ./test-eval inp.1.txt
==972== Parent PID: 971
==972== 
==972== Use of uninitialised value of size 8
==972==    at 0x400C02: print_hand (deck.c:8)
==972==    by 0x401B92: compare_hands (eval.c:198)
==972==    by 0x402B82: main (test-eval.c:124)
==972== 
==972== Invalid read of size 8
==972==    at 0x400C02: print_hand (deck.c:8)
==972==    by 0x401B92: compare_hands (eval.c:198)
==972==    by 0x402B82: main (test-eval.c:124)
==972==  Address 0xf00000008 is not stack'd, malloc'd or (recently) free'd
==972== 
==972== 
==972== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==972==  Access not within mapped region at address 0xF00000008
==972==    at 0x400C02: print_hand (deck.c:8)
==972==    by 0x401B92: compare_hands (eval.c:198)
==972==    by 0x402B82: main (test-eval.c:124)
==972==  If you believe this happened as a result of a stack
==972==  overflow in your program's main thread (unlikely but
==972==  possible), you can try to increase the size of the
==972==  main thread stack using the --main-stacksize= flag.
==972==  The main thread stack size used in this run was 8388608.
==972== 
==972== HEAP SUMMARY:
==972==     in use at exit: 896 bytes in 18 blocks
==972==   total heap usage: 62 allocs, 44 frees, 9,936 bytes allocated
==972== 
==972== LEAK SUMMARY:
==972==    definitely lost: 0 bytes in 0 blocks
==972==    indirectly lost: 0 bytes in 0 blocks
==972==      possibly lost: 0 bytes in 0 blocks
==972==    still reachable: 896 bytes in 18 blocks
==972==         suppressed: 0 bytes in 0 blocks
==972== Rerun with --leak-check=full to see details of leaked memory
==972== 
==972== For counts of detected and suppressed errors, rerun with: -v
==972== Use --track-origins=yes to see where uninitialised values come from
==972== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==977== Memcheck, a memory error detector
==977== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==977== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==977== Command: ./test-eval inp.2.txt
==977== Parent PID: 976
==977== 
==977== Use of uninitialised value of size 8
==977==    at 0x400C02: print_hand (deck.c:8)
==977==    by 0x401B92: compare_hands (eval.c:198)
==977==    by 0x402B82: main (test-eval.c:124)
==977== 
==977== Invalid read of size 8
==977==    at 0x400C02: print_hand (deck.c:8)
==977==    by 0x401B92: compare_hands (eval.c:198)
==977==    by 0x402B82: main (test-eval.c:124)
==977==  Address 0xf00000007 is not stack'd, malloc'd or (recently) free'd
==977== 
==977== 
==977== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==977==  Access not within mapped region at address 0xF00000007
==977==    at 0x400C02: print_hand (deck.c:8)
==977==    by 0x401B92: compare_hands (eval.c:198)
==977==    by 0x402B82: main (test-eval.c:124)
==977==  If you believe this happened as a result of a stack
==977==  overflow in your program's main thread (unlikely but
==977==  possible), you can try to increase the size of the
==977==  main thread stack using the --main-stacksize= flag.
==977==  The main thread stack size used in this run was 8388608.
==977== 
==977== HEAP SUMMARY:
==977==     in use at exit: 880 bytes in 17 blocks
==977==   total heap usage: 58 allocs, 41 frees, 9,812 bytes allocated
==977== 
==977== LEAK SUMMARY:
==977==    definitely lost: 0 bytes in 0 blocks
==977==    indirectly lost: 0 bytes in 0 blocks
==977==      possibly lost: 0 bytes in 0 blocks
==977==    still reachable: 880 bytes in 17 blocks
==977==         suppressed: 0 bytes in 0 blocks
==977== Rerun with --leak-check=full to see details of leaked memory
==977== 
==977== For counts of detected and suppressed errors, rerun with: -v
==977== Use --track-origins=yes to see where uninitialised values come from
==977== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==982== Memcheck, a memory error detector
==982== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==982== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==982== Command: ./test-eval inp.3.txt
==982== Parent PID: 981
==982== 
==982== Use of uninitialised value of size 8
==982==    at 0x400C02: print_hand (deck.c:8)
==982==    by 0x401B92: compare_hands (eval.c:198)
==982==    by 0x402B82: main (test-eval.c:124)
==982== 
==982== Invalid read of size 8
==982==    at 0x400C02: print_hand (deck.c:8)
==982==    by 0x401B92: compare_hands (eval.c:198)
==982==    by 0x402B82: main (test-eval.c:124)
==982==  Address 0xf00000006 is not stack'd, malloc'd or (recently) free'd
==982== 
==982== 
==982== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==982==  Access not within mapped region at address 0xF00000006
==982==    at 0x400C02: print_hand (deck.c:8)
==982==    by 0x401B92: compare_hands (eval.c:198)
==982==    by 0x402B82: main (test-eval.c:124)
==982==  If you believe this happened as a result of a stack
==982==  overflow in your program's main thread (unlikely but
==982==  possible), you can try to increase the size of the
==982==  main thread stack using the --main-stacksize= flag.
==982==  The main thread stack size used in this run was 8388608.
==982== 
==982== HEAP SUMMARY:
==982==     in use at exit: 864 bytes in 16 blocks
==982==   total heap usage: 54 allocs, 38 frees, 9,688 bytes allocated
==982== 
==982== LEAK SUMMARY:
==982==    definitely lost: 0 bytes in 0 blocks
==982==    indirectly lost: 0 bytes in 0 blocks
==982==      possibly lost: 0 bytes in 0 blocks
==982==    still reachable: 864 bytes in 16 blocks
==982==         suppressed: 0 bytes in 0 blocks
==982== Rerun with --leak-check=full to see details of leaked memory
==982== 
==982== For counts of detected and suppressed errors, rerun with: -v
==982== Use --track-origins=yes to see where uninitialised values come from
==982== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==987== Memcheck, a memory error detector
==987== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==987== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==987== Command: ./test-eval inp.4.txt
==987== Parent PID: 986
==987== 
==987== Use of uninitialised value of size 8
==987==    at 0x400C02: print_hand (deck.c:8)
==987==    by 0x401B92: compare_hands (eval.c:198)
==987==    by 0x402B82: main (test-eval.c:124)
==987== 
==987== Invalid read of size 8
==987==    at 0x400C02: print_hand (deck.c:8)
==987==    by 0x401B92: compare_hands (eval.c:198)
==987==    by 0x402B82: main (test-eval.c:124)
==987==  Address 0xf00000005 is not stack'd, malloc'd or (recently) free'd
==987== 
==987== 
==987== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==987==  Access not within mapped region at address 0xF00000005
==987==    at 0x400C02: print_hand (deck.c:8)
==987==    by 0x401B92: compare_hands (eval.c:198)
==987==    by 0x402B82: main (test-eval.c:124)
==987==  If you believe this happened as a result of a stack
==987==  overflow in your program's main thread (unlikely but
==987==  possible), you can try to increase the size of the
==987==  main thread stack using the --main-stacksize= flag.
==987==  The main thread stack size used in this run was 8388608.
==987== 
==987== HEAP SUMMARY:
==987==     in use at exit: 896 bytes in 18 blocks
==987==   total heap usage: 62 allocs, 44 frees, 9,936 bytes allocated
==987== 
==987== LEAK SUMMARY:
==987==    definitely lost: 0 bytes in 0 blocks
==987==    indirectly lost: 0 bytes in 0 blocks
==987==      possibly lost: 0 bytes in 0 blocks
==987==    still reachable: 896 bytes in 18 blocks
==987==         suppressed: 0 bytes in 0 blocks
==987== Rerun with --leak-check=full to see details of leaked memory
==987== 
==987== For counts of detected and suppressed errors, rerun with: -v
==987== Use --track-origins=yes to see where uninitialised values come from
==987== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==992== Memcheck, a memory error detector
==992== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==992== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==992== Command: ./test-eval inp.5.txt
==992== Parent PID: 991
==992== 
==992== Use of uninitialised value of size 8
==992==    at 0x400C02: print_hand (deck.c:8)
==992==    by 0x401B92: compare_hands (eval.c:198)
==992==    by 0x402B82: main (test-eval.c:124)
==992== 
==992== Invalid read of size 8
==992==    at 0x400C02: print_hand (deck.c:8)
==992==    by 0x401B92: compare_hands (eval.c:198)
==992==    by 0x402B82: main (test-eval.c:124)
==992==  Address 0xf00000004 is not stack'd, malloc'd or (recently) free'd
==992== 
==992== 
==992== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==992==  Access not within mapped region at address 0xF00000004
==992==    at 0x400C02: print_hand (deck.c:8)
==992==    by 0x401B92: compare_hands (eval.c:198)
==992==    by 0x402B82: main (test-eval.c:124)
==992==  If you believe this happened as a result of a stack
==992==  overflow in your program's main thread (unlikely but
==992==  possible), you can try to increase the size of the
==992==  main thread stack using the --main-stacksize= flag.
==992==  The main thread stack size used in this run was 8388608.
==992== 
==992== HEAP SUMMARY:
==992==     in use at exit: 864 bytes in 16 blocks
==992==   total heap usage: 54 allocs, 38 frees, 9,688 bytes allocated
==992== 
==992== LEAK SUMMARY:
==992==    definitely lost: 0 bytes in 0 blocks
==992==    indirectly lost: 0 bytes in 0 blocks
==992==      possibly lost: 0 bytes in 0 blocks
==992==    still reachable: 864 bytes in 16 blocks
==992==         suppressed: 0 bytes in 0 blocks
==992== Rerun with --leak-check=full to see details of leaked memory
==992== 
==992== For counts of detected and suppressed errors, rerun with: -v
==992== Use --track-origins=yes to see where uninitialised values come from
==992== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==997== Memcheck, a memory error detector
==997== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==997== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==997== Command: ./test-eval inp.6.txt
==997== Parent PID: 996
==997== 
==997== Use of uninitialised value of size 8
==997==    at 0x400C02: print_hand (deck.c:8)
==997==    by 0x401B92: compare_hands (eval.c:198)
==997==    by 0x402B82: main (test-eval.c:124)
==997== 
==997== Invalid read of size 8
==997==    at 0x400C02: print_hand (deck.c:8)
==997==    by 0x401B92: compare_hands (eval.c:198)
==997==    by 0x402B82: main (test-eval.c:124)
==997==  Address 0xf00000003 is not stack'd, malloc'd or (recently) free'd
==997== 
==997== 
==997== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==997==  Access not within mapped region at address 0xF00000003
==997==    at 0x400C02: print_hand (deck.c:8)
==997==    by 0x401B92: compare_hands (eval.c:198)
==997==    by 0x402B82: main (test-eval.c:124)
==997==  If you believe this happened as a result of a stack
==997==  overflow in your program's main thread (unlikely but
==997==  possible), you can try to increase the size of the
==997==  main thread stack using the --main-stacksize= flag.
==997==  The main thread stack size used in this run was 8388608.
==997== 
==997== HEAP SUMMARY:
==997==     in use at exit: 896 bytes in 18 blocks
==997==   total heap usage: 62 allocs, 44 frees, 9,936 bytes allocated
==997== 
==997== LEAK SUMMARY:
==997==    definitely lost: 0 bytes in 0 blocks
==997==    indirectly lost: 0 bytes in 0 blocks
==997==      possibly lost: 0 bytes in 0 blocks
==997==    still reachable: 896 bytes in 18 blocks
==997==         suppressed: 0 bytes in 0 blocks
==997== Rerun with --leak-check=full to see details of leaked memory
==997== 
==997== For counts of detected and suppressed errors, rerun with: -v
==997== Use --track-origins=yes to see where uninitialised values come from
==997== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1002== Memcheck, a memory error detector
==1002== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1002== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1002== Command: ./test-eval inp.7.txt
==1002== Parent PID: 1001
==1002== 
==1002== Use of uninitialised value of size 8
==1002==    at 0x400C02: print_hand (deck.c:8)
==1002==    by 0x401B92: compare_hands (eval.c:198)
==1002==    by 0x402B82: main (test-eval.c:124)
==1002== 
==1002== Invalid read of size 8
==1002==    at 0x400C02: print_hand (deck.c:8)
==1002==    by 0x401B92: compare_hands (eval.c:198)
==1002==    by 0x402B82: main (test-eval.c:124)
==1002==  Address 0xf00000002 is not stack'd, malloc'd or (recently) free'd
==1002== 
==1002== 
==1002== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1002==  Access not within mapped region at address 0xF00000002
==1002==    at 0x400C02: print_hand (deck.c:8)
==1002==    by 0x401B92: compare_hands (eval.c:198)
==1002==    by 0x402B82: main (test-eval.c:124)
==1002==  If you believe this happened as a result of a stack
==1002==  overflow in your program's main thread (unlikely but
==1002==  possible), you can try to increase the size of the
==1002==  main thread stack using the --main-stacksize= flag.
==1002==  The main thread stack size used in this run was 8388608.
==1002== 
==1002== HEAP SUMMARY:
==1002==     in use at exit: 928 bytes in 20 blocks
==1002==   total heap usage: 70 allocs, 50 frees, 10,216 bytes allocated
==1002== 
==1002== LEAK SUMMARY:
==1002==    definitely lost: 0 bytes in 0 blocks
==1002==    indirectly lost: 0 bytes in 0 blocks
==1002==      possibly lost: 0 bytes in 0 blocks
==1002==    still reachable: 928 bytes in 20 blocks
==1002==         suppressed: 0 bytes in 0 blocks
==1002== Rerun with --leak-check=full to see details of leaked memory
==1002== 
==1002== For counts of detected and suppressed errors, rerun with: -v
==1002== Use --track-origins=yes to see where uninitialised values come from
==1002== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1007== Memcheck, a memory error detector
==1007== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1007== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1007== Command: ./test-eval inp.8.txt
==1007== Parent PID: 1006
==1007== 
==1007== Use of uninitialised value of size 8
==1007==    at 0x400C02: print_hand (deck.c:8)
==1007==    by 0x401B92: compare_hands (eval.c:198)
==1007==    by 0x402B82: main (test-eval.c:124)
==1007== 
==1007== Invalid read of size 8
==1007==    at 0x400C02: print_hand (deck.c:8)
==1007==    by 0x401B92: compare_hands (eval.c:198)
==1007==    by 0x402B82: main (test-eval.c:124)
==1007==  Address 0xf00000001 is not stack'd, malloc'd or (recently) free'd
==1007== 
==1007== 
==1007== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1007==  Access not within mapped region at address 0xF00000001
==1007==    at 0x400C02: print_hand (deck.c:8)
==1007==    by 0x401B92: compare_hands (eval.c:198)
==1007==    by 0x402B82: main (test-eval.c:124)
==1007==  If you believe this happened as a result of a stack
==1007==  overflow in your program's main thread (unlikely but
==1007==  possible), you can try to increase the size of the
==1007==  main thread stack using the --main-stacksize= flag.
==1007==  The main thread stack size used in this run was 8388608.
==1007== 
==1007== HEAP SUMMARY:
==1007==     in use at exit: 896 bytes in 18 blocks
==1007==   total heap usage: 62 allocs, 44 frees, 9,936 bytes allocated
==1007== 
==1007== LEAK SUMMARY:
==1007==    definitely lost: 0 bytes in 0 blocks
==1007==    indirectly lost: 0 bytes in 0 blocks
==1007==      possibly lost: 0 bytes in 0 blocks
==1007==    still reachable: 896 bytes in 18 blocks
==1007==         suppressed: 0 bytes in 0 blocks
==1007== Rerun with --leak-check=full to see details of leaked memory
==1007== 
==1007== For counts of detected and suppressed errors, rerun with: -v
==1007== Use --track-origins=yes to see where uninitialised values come from
==1007== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==1012== Memcheck, a memory error detector
==1012== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1012== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1012== Command: ./test-eval inp.9.txt
==1012== Parent PID: 1011
==1012== 
==1012== Use of uninitialised value of size 8
==1012==    at 0x400C02: print_hand (deck.c:8)
==1012==    by 0x401B92: compare_hands (eval.c:198)
==1012==    by 0x402B82: main (test-eval.c:124)
==1012== 
==1012== Invalid read of size 8
==1012==    at 0x400C02: print_hand (deck.c:8)
==1012==    by 0x401B92: compare_hands (eval.c:198)
==1012==    by 0x402B82: main (test-eval.c:124)
==1012==  Address 0xf00000000 is not stack'd, malloc'd or (recently) free'd
==1012== 
==1012== 
==1012== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1012==  Access not within mapped region at address 0xF00000000
==1012==    at 0x400C02: print_hand (deck.c:8)
==1012==    by 0x401B92: compare_hands (eval.c:198)
==1012==    by 0x402B82: main (test-eval.c:124)
==1012==  If you believe this happened as a result of a stack
==1012==  overflow in your program's main thread (unlikely but
==1012==  possible), you can try to increase the size of the
==1012==  main thread stack using the --main-stacksize= flag.
==1012==  The main thread stack size used in this run was 8388608.
==1012== 
==1012== HEAP SUMMARY:
==1012==     in use at exit: 864 bytes in 16 blocks
==1012==   total heap usage: 50 allocs, 34 frees, 9,608 bytes allocated
==1012== 
==1012== LEAK SUMMARY:
==1012==    definitely lost: 0 bytes in 0 blocks
==1012==    indirectly lost: 0 bytes in 0 blocks
==1012==      possibly lost: 0 bytes in 0 blocks
==1012==    still reachable: 864 bytes in 16 blocks
==1012==         suppressed: 0 bytes in 0 blocks
==1012== Rerun with --leak-check=full to see details of leaked memory
==1012== 
==1012== For counts of detected and suppressed errors, rerun with: -v
==1012== Use --track-origins=yes to see where uninitialised values come from
==1012== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1017== Memcheck, a memory error detector
==1017== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1017== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1017== Command: ./test-eval inp.10.txt
==1017== Parent PID: 1016
==1017== 
==1017== Use of uninitialised value of size 8
==1017==    at 0x400C02: print_hand (deck.c:8)
==1017==    by 0x401B92: compare_hands (eval.c:198)
==1017==    by 0x402B82: main (test-eval.c:124)
==1017== 
==1017== Invalid read of size 8
==1017==    at 0x400C02: print_hand (deck.c:8)
==1017==    by 0x401B92: compare_hands (eval.c:198)
==1017==    by 0x402B82: main (test-eval.c:124)
==1017==  Address 0xf00000001 is not stack'd, malloc'd or (recently) free'd
==1017== 
==1017== 
==1017== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1017==  Access not within mapped region at address 0xF00000001
==1017==    at 0x400C02: print_hand (deck.c:8)
==1017==    by 0x401B92: compare_hands (eval.c:198)
==1017==    by 0x402B82: main (test-eval.c:124)
==1017==  If you believe this happened as a result of a stack
==1017==  overflow in your program's main thread (unlikely but
==1017==  possible), you can try to increase the size of the
==1017==  main thread stack using the --main-stacksize= flag.
==1017==  The main thread stack size used in this run was 8388608.
==1017== 
==1017== HEAP SUMMARY:
==1017==     in use at exit: 896 bytes in 18 blocks
==1017==   total heap usage: 62 allocs, 44 frees, 9,936 bytes allocated
==1017== 
==1017== LEAK SUMMARY:
==1017==    definitely lost: 0 bytes in 0 blocks
==1017==    indirectly lost: 0 bytes in 0 blocks
==1017==      possibly lost: 0 bytes in 0 blocks
==1017==    still reachable: 896 bytes in 18 blocks
==1017==         suppressed: 0 bytes in 0 blocks
==1017== Rerun with --leak-check=full to see details of leaked memory
==1017== 
==1017== For counts of detected and suppressed errors, rerun with: -v
==1017== Use --track-origins=yes to see where uninitialised values come from
==1017== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
