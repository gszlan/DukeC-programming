Grading at Mon Oct 21 21:16:43 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==615== Memcheck, a memory error detector
==615== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==615== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==615== Command: ./tester h.txt d.txt
==615== Parent PID: 614
==615== 
==615== Invalid read of size 1
==615==    at 0x400BAA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==615==    by 0x400CB1: read_input (in /graderhome/work/c4prj2_input/tester)
==615==    by 0x401A6A: main (test-input.c:69)
==615==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==615== 
==615== 
==615== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==615==  Access not within mapped region at address 0x1
==615==    at 0x400BAA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==615==    by 0x400CB1: read_input (in /graderhome/work/c4prj2_input/tester)
==615==    by 0x401A6A: main (test-input.c:69)
==615==  If you believe this happened as a result of a stack
==615==  overflow in your program's main thread (unlikely but
==615==  possible), you can try to increase the size of the
==615==  main thread stack using the --main-stacksize= flag.
==615==  The main thread stack size used in this run was 8388608.
==615== 
==615== HEAP SUMMARY:
==615==     in use at exit: 832 bytes in 14 blocks
==615==   total heap usage: 21 allocs, 7 frees, 5,096 bytes allocated
==615== 
==615== LEAK SUMMARY:
==615==    definitely lost: 0 bytes in 0 blocks
==615==    indirectly lost: 0 bytes in 0 blocks
==615==      possibly lost: 0 bytes in 0 blocks
==615==    still reachable: 832 bytes in 14 blocks
==615==         suppressed: 0 bytes in 0 blocks
==615== Rerun with --leak-check=full to see details of leaked memory
==615== 
==615== For counts of detected and suppressed errors, rerun with: -v
==615== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==621== Memcheck, a memory error detector
==621== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==621== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==621== Command: ./tester i1 i2
==621== Parent PID: 620
==621== 
==621== Invalid read of size 1
==621==    at 0x400BAA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==621==    by 0x400CB1: read_input (in /graderhome/work/c4prj2_input/tester)
==621==    by 0x401A6A: main (test-input.c:69)
==621==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==621== 
==621== 
==621== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==621==  Access not within mapped region at address 0x1
==621==    at 0x400BAA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==621==    by 0x400CB1: read_input (in /graderhome/work/c4prj2_input/tester)
==621==    by 0x401A6A: main (test-input.c:69)
==621==  If you believe this happened as a result of a stack
==621==  overflow in your program's main thread (unlikely but
==621==  possible), you can try to increase the size of the
==621==  main thread stack using the --main-stacksize= flag.
==621==  The main thread stack size used in this run was 8388608.
==621== 
==621== HEAP SUMMARY:
==621==     in use at exit: 904 bytes in 17 blocks
==621==   total heap usage: 27 allocs, 10 frees, 5,264 bytes allocated
==621== 
==621== LEAK SUMMARY:
==621==    definitely lost: 0 bytes in 0 blocks
==621==    indirectly lost: 0 bytes in 0 blocks
==621==      possibly lost: 0 bytes in 0 blocks
==621==    still reachable: 904 bytes in 17 blocks
==621==         suppressed: 0 bytes in 0 blocks
==621== Rerun with --leak-check=full to see details of leaked memory
==621== 
==621== For counts of detected and suppressed errors, rerun with: -v
==621== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
